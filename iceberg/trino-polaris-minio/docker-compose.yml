services:

  polaris:
    image: apache/polaris:1.0.0-incubating
    platform: linux/amd64
    ports:
      - "8181:8181"
    networks:
      - local-iceberg-lakehouse
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: dummy-region
      AWS_ENDPOINT_URL_S3: http://minio:9000
      AWS_ENDPOINT_URL_STS: http://minio:9000
      POLARIS_BOOTSTRAP_CREDENTIALS: default-realm,root,secret
      polaris.features.DROP_WITH_PURGE_ENABLED: true # allow dropping tables from the SQL client
      polaris.realm-context.realms: default-realm
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8182/healthcheck"]
      interval: 5s
      timeout: 10s
      retries: 5

  polaris-config:
    image: alpine/httpie:latest
    depends_on:
      polaris:
        condition: service_healthy
    networks:
      - local-iceberg-lakehouse
    volumes:
      - $PWD:/data/
    entrypoint: >
      /bin/sh -c '
      set -e;
      echo "Waiting for Polaris to be ready...";
      until http GET http://polaris:8182/healthcheck > /dev/null 2>&1; do
        sleep 2;
      done;
      echo "Polaris is ready.";
      echo "Running setup.";
      /data/setup.sh;

      echo "Polaris configured successfully. Container will stay up for monitoring.";
      tail -f /dev/null;
      '

  trino:
    image: trinodb/trino:latest
    ports:
      - "8080:8080"
    environment:
      - TRINO_JVM_OPTS=-Xmx2G
    networks:
      - local-iceberg-lakehouse
    volumes:
      - ./trino/catalog:/etc/trino/catalog

  minio:
    image: minio/minio:latest
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: dummy-region
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
      MINIO_DOMAIN: minio
    networks:
      local-iceberg-lakehouse:
        aliases:
          - warehouse.minio
    ports:
      - "9001:9001"
      - "9000:9000"
    command: ["server", "/data", "--console-address", ":9001"]

  minio-client:
    image: minio/mc:latest
    depends_on:
      - minio
    networks:
      - local-iceberg-lakehouse
    volumes:
      - /tmp:/tmp
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: dummy-region
    entrypoint: >
      /bin/sh -c "
      until (mc alias set minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      mc rm -r --force minio/warehouse;
      mc mb minio/warehouse;
      mc anonymous set public minio/warehouse;
      tail -f /dev/null
      "

  spark-iceberg:
# docker compose exec spark-iceberg bash -c "apt-get update && apt-get install -y pandoc"
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    networks:
      - local-iceberg-lakehouse
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/iceberg/notebooks

networks:
  local-iceberg-lakehouse:
    name: local-iceberg-lakehouse
